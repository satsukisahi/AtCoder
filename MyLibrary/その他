#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
ll h,w,n;
vector<ll> v;

//エリア内か確認するときなど
bool inarea(ll x,ll y){
  return x >= 0 && y >= 0 && x < h && y < w ;
}

//構造体
struct point {
    double x,y,val;
    point() {}
    point(double x, double y, double val) : x(x), y(y), val(val) {};
    point(double x, double y) : x(x), y(y), val(0) {};
};

//sort用の比較関数　>なら降順 
bool cmp(const point &a, const point &b){
  return a.val > b.val;
}

//区間[s,t]の和集合（整数の数）をとる vector<pair<ll,ll>> の要素がs,t
sort(v.begin(),v.end());
ll p=-INF;
for(auto r:v){
  ans+=max(0LL,(rr.second+1-max(p,rr.first));
  p=max(p,rr.second+1);
}

//bit全探索
//d=個数 0から2^d乗まで
for ((ll) bit = 0; bit < (1<<d); ++bit) {
//各ビットを下から見ていく
  rep(j,d){
//jビット目が1なら処理を行う
    if(bit>>j&1){
      todo;
    }
  }
}

//グラフDFS
void dfs(ll x, vector<vector<edge>> &g, vector<bool> &see)
{
  //点xに対する処理
  see[x] = 1;
  for (auto p : g[x])
  {
    if (see[p.to])continue;
    //進む辺に対する処理（これは木構造でオイラーツアーするために使う）
    dfs(p.to, g, see);
    //戻る辺に対する処理
  }
  //点xの親に戻る時の処理
}

//DFSスタックでやるとき
stack<ll> s;
bool see[n]={};
s.push(0);//スタート
s.push(0);
while(s.size()!=0){
  ll now=s.top();
  s.pop();
  if(!see[now]){
    see[now]=1;
    //訪れた点に対する処理
    for (auto p : g[now])
    {
      if (see[p])continue;
      see[p]=1;
      s.push(p);
      s.push(p);
    }
  }
  else{
    //去る点に対する処理
  }
}

//グラフBFS root=0
vector<ll> par(n);
vector<bool> see(n);
queue<ll> q;
par[0]=-1;
see[0]=1;
q.push(0);
while(!q.empty()){
  auto p=q.front();
  q.pop();
  for(auto r:g[p]){
    if(see[r]!=0)continue;
    par[r]=p;
    see[r]=1;
    q.push(r);
  }
}

//ダブリング
//構築
vector<vector<ll>> dub(20, vector<ll>(n,0));
//dub[0][i]にiの次のインデックスを入れる　なければ-1
rep(i,19){
  rep(j,n){
    if(dub[i][j]==-1)dub[i+1][j]=-1;
    else dub[i+1][j]=dub[i][dub[i][j]];
  }
}
//二分探索 上界か下界かを意識
for (ll i = 20; i >= 0; i--)
{
  if(0<dub[i][a] && インデックスdub[i][a](つまりa+2^i)が条件を満たすか　){
    ans+=1LL<<i;
    a=dub[i][a];
  }
}

//根付き木グラフで葉から見るとき
vector<vector<ll>> child(n);
vector<ll> par(n);
queue<ll> q;
queue<ll> qq;
ll root=0;
q.push(root);
par[root]=-1;
//親の定義と葉を見つける
while(!q.empty()){
  ll p=q.front();
  q.pop();
  if(g[p].size()==1 && p!=root){qq.push(p);}
  for(auto r:g[p]){
    if(r==par[p])continue;
    par[r]=p;
    q.push(r);
  }
}
while(!qq.empty()){
  ll p=qq.front();
  qq.pop();
  child[par[p]].push_back(p);//親に値を追加する
  //根の時は例外処理
  if(child[par[p]].size()==g[par[p]].size()){
    //child[par[p]]に子の値が入ってる
  }
  //全ての葉が親に追加し終わった
  if(child[par[p]].size()==g[par[p]].size()-1 && par[p]!=root){
    //child[par[p]]に子の値が入ってる
    qq.push(par[p]);
  }
}