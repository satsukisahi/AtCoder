{
	// Place your AtCoder workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"input1": {
		"prefix": "cin",
		"body": [
			"ll $1 ;",
			"cin >> $1 ;"
		],
		"description": "input 1 value"
	},
	"input2": {
		"prefix": "cin",
		"body": [
			"ll $1 , $2 ;",
			"cin >> $1 >> $2 ;"
		],
		"description": "input 2 values"
	},
	"input3": {
		"prefix": "cin",
		"body": [
			"ll $1 , $2 , $3 ;",
			"cin >> $1 >> $2 >> $3 ;"
		],
		"description": "input 3 values"
	},
	"input array": {
		"prefix": "cin",
		"body": [
			"vector<ll> $1(${2:n});",
			"rep(i, ${2:n}){",
				"\tcin >> $1[i];",
			"}"
		],
		"description": "input array"
	},
	"output": {
		"prefix": "cout",
		"body": [
			"cout << $1 << endl;"
		],
		"description": "output 1 value"
	},


	"mod": {
		"prefix": "mod",
		"body": [
			"const ll mo = ${1:1000000007};"
		],
		"description": "mod"
	},
	"INF": {
		"prefix": "inf",
		"body": [
			"const ll INF = 1LL << 60; //MAX 9223372036854775807"
		],
		"description": "INF"
	},

	
	"STL ALL": {
		"prefix": "all",
		"body": [
			"$1.begin(),$1.end()$2"
		],
		"description": "STL ALL"
	},
}